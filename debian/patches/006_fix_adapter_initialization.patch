diff --git a/plugins/hciops.c b/plugins/hciops.c
index 829011a..4dc5ed6 100644
--- a/plugins/hciops.c
+++ b/plugins/hciops.c
@@ -55,10 +55,24 @@ static int child_pipe[2] = { -1, -1 };
 static guint child_io_id = 0;
 static guint ctl_io_id = 0;
 
+/* Commands sent by kernel on starting an adapter */
+enum {
+	PENDING_BDADDR,
+	PENDING_VERSION,
+	PENDING_FEATURES,
+	PENDING_NAME,
+};
+
+#define set_bit(nr, addr) (*(addr) |= (1 << (nr)))
+#define clear_bit(nr, addr) (*(addr) &= ~(1 << (nr)))
+
 #define SK(index) devs[(index)].sk
 #define BDADDR(index) devs[(index)].bdaddr
+#define FEATURES(index) devs[(index)].features
+#define VER(index) devs[(index)].ver
+#define NAME(index) devs[(index)].name
 #define UP(index) devs[(index)].up
-#define READY(index) devs[(index)].ready
+#define PENDING(index) devs[(index)].pending
 #define CHANNEL(index) devs[(index)].channel
 #define WATCH_ID(index) devs[(index)].watch_id
 #define PIN_LENGTH(index) devs[(index)].pin_length
@@ -67,8 +81,12 @@ static int max_dev = -1;
 static struct dev_info {
 	int sk;
 	bdaddr_t bdaddr;
+	uint8_t features[8];
+	struct hci_version ver;
+	char name[248];
+
 	gboolean up;
-	gboolean ready;
+	unsigned long pending;
 
 	GIOChannel *channel;
 	guint watch_id;
@@ -685,6 +703,68 @@ static void write_le_host_complete(bdaddr_t *sba, uint8_t status)
 	btd_adapter_read_local_ext_features(adapter);
 }
 
+static void read_local_version_complete(int index,
+				const read_local_version_rp *rp)
+{
+	if (rp->status)
+		return;
+
+	VER(index).manufacturer = btohs(bt_get_unaligned(&rp->manufacturer));
+	VER(index).hci_ver = rp->hci_ver;
+	VER(index).hci_rev = btohs(bt_get_unaligned(&rp->hci_rev));
+	VER(index).lmp_ver = rp->lmp_ver;
+	VER(index).lmp_subver = btohs(bt_get_unaligned(&rp->lmp_subver));
+
+	if (!PENDING(index))
+		return;
+
+	clear_bit(PENDING_VERSION, &PENDING(index));
+
+	DBG("Got version for hci%d", index);
+
+	if (!PENDING(index) && UP(index))
+		manager_start_adapter(index);
+}
+
+static void read_local_features_complete(int index,
+				const read_local_features_rp *rp)
+{
+	if (rp->status)
+		return;
+
+	memcpy(FEATURES(index), rp->features, 8);
+
+	if (!PENDING(index))
+		return;
+
+	clear_bit(PENDING_FEATURES, &PENDING(index));
+
+	DBG("Got features for hci%d", index);
+
+	if (!PENDING(index) && UP(index))
+		manager_start_adapter(index);
+}
+
+static void read_local_name_complete(int index, read_local_name_rp *rp)
+{
+	if (rp->status)
+		return;
+
+	memcpy(NAME(index), rp->name, 248);
+
+	if (!PENDING(index)) {
+		adapter_update_local_name(&BDADDR(index), rp);
+		return;
+	}
+
+	clear_bit(PENDING_NAME, &PENDING(index));
+
+	DBG("Got name for hci%d", index);
+
+	if (!PENDING(index) && UP(index))
+		manager_start_adapter(index);
+}
+
 static void read_local_ext_features_complete(bdaddr_t *sba,
 				const read_local_ext_features_rp *rp)
 {
@@ -713,14 +793,14 @@ static void read_bd_addr_complete(int index, read_bd_addr_rp *rp)
 
 	bacpy(&BDADDR(index), &rp->bdaddr);
 
-	if (READY(index))
+	if (!PENDING(index))
 		return;
 
-	READY(index) = TRUE;
+	clear_bit(PENDING_BDADDR, &PENDING(index));
 
 	DBG("Got bdaddr for hci%d", index);
 
-	if (UP(index))
+	if (!PENDING(index) && UP(index))
 		manager_start_adapter(index);
 }
 
@@ -755,6 +835,14 @@ static inline void cmd_complete(int index, void *ptr)
 	uint8_t status = *((uint8_t *) ptr + EVT_CMD_COMPLETE_SIZE);
 
 	switch (opcode) {
+	case cmd_opcode_pack(OGF_INFO_PARAM, OCF_READ_LOCAL_VERSION):
+		ptr += sizeof(evt_cmd_complete);
+		read_local_version_complete(index, ptr);
+		break;
+	case cmd_opcode_pack(OGF_INFO_PARAM, OCF_READ_LOCAL_FEATURES):
+		ptr += sizeof(evt_cmd_complete);
+		read_local_features_complete(index, ptr);
+		break;
 	case cmd_opcode_pack(OGF_INFO_PARAM, OCF_READ_LOCAL_EXT_FEATURES):
 		ptr += sizeof(evt_cmd_complete);
 		read_local_ext_features_complete(&BDADDR(index), ptr);
@@ -801,7 +889,7 @@ static inline void cmd_complete(int index, void *ptr)
 		break;
 	case cmd_opcode_pack(OGF_HOST_CTL, OCF_READ_LOCAL_NAME):
 		ptr += sizeof(evt_cmd_complete);
-		adapter_update_local_name(&BDADDR(index), status, ptr);
+		read_local_name_complete(index, ptr);
 		break;
 	case cmd_opcode_pack(OGF_HOST_CTL,
 					OCF_READ_INQ_RESPONSE_TX_POWER_LEVEL):
@@ -1290,6 +1378,7 @@ static void device_devup_setup(int index)
 		return;
 
 	bacpy(&BDADDR(index), &di.bdaddr);
+	memcpy(FEATURES(index), di.features, 8);
 
 	/* Set page timeout */
 	if ((main_opts.flags & (1 << HCID_SET_PAGETO))) {
@@ -1310,10 +1399,18 @@ static void device_devup_setup(int index)
 	hci_send_cmd(SK(index), OGF_HOST_CTL, OCF_READ_STORED_LINK_KEY,
 			READ_STORED_LINK_KEY_CP_SIZE, (void *) &cp);
 
-	if (READY(index))
+	if (!PENDING(index))
 		manager_start_adapter(index);
 }
 
+static void init_pending(int index)
+{
+	set_bit(PENDING_BDADDR, &PENDING(index));
+	set_bit(PENDING_VERSION, &PENDING(index));
+	set_bit(PENDING_FEATURES, &PENDING(index));
+	set_bit(PENDING_NAME, &PENDING(index));
+}
+
 static void init_device(int index)
 {
 	struct hci_dev_req dr;
@@ -1334,6 +1431,7 @@ static void init_device(int index)
 	}
 
 	init_dev_info(index, dd);
+	init_pending(index);
 	start_hci_dev(index);
 
 	/* Do initialization in the separate process */
@@ -1428,9 +1526,9 @@ static void device_event(int event, int index)
 	case HCI_DEV_DOWN:
 		info("HCI dev %d down", index);
 		UP(index) = FALSE;
-		if (READY(index)) {
+		if (!PENDING(index)) {
 			manager_stop_adapter(index);
-			READY(index) = FALSE;
+			init_pending(index);
 		}
 		break;
 	}
@@ -1464,8 +1562,14 @@ static gboolean init_known_adapters(gpointer user_data)
 	for (i = 0; i < dl->dev_num; i++, dr++) {
 		device_event(HCI_DEV_REG, dr->dev_id);
 
-		if (hci_test_bit(HCI_UP, &dr->dev_opt))
-			device_event(HCI_DEV_UP, dr->dev_id);
+		if (!hci_test_bit(HCI_UP, &dr->dev_opt))
+			continue;
+
+		PENDING(dr->dev_id) = 0;
+		set_bit(PENDING_VERSION, &PENDING(dr->dev_id));
+		hci_send_cmd(SK(dr->dev_id), OGF_INFO_PARAM,
+					OCF_READ_LOCAL_VERSION, 0, NULL);
+		device_event(HCI_DEV_UP, dr->dev_id);
 	}
 
 	g_free(dl);
@@ -1776,24 +1880,42 @@ static int hciops_stop_inquiry(int index)
 	return err;
 }
 
-static int hciops_start_scanning(int index)
+static int le_set_scan_enable(int index, uint8_t enable)
 {
-	if (hci_le_set_scan_parameters(SK(index), 0x01, htobs(0x0010),
-					htobs(0x0010), 0x00, 0x00) < 0)
-		return -errno;
+	le_set_scan_enable_cp cp;
+
+	memset(&cp, 0, sizeof(cp));
+	cp.enable = enable;
+	cp.filter_dup = 0;
 
-	if (hci_le_set_scan_enable(SK(index), 0x01, 0x00) < 0)
+	if (hci_send_cmd(SK(index), OGF_LE_CTL, OCF_LE_SET_SCAN_ENABLE,
+				LE_SET_SCAN_ENABLE_CP_SIZE, &cp) < 0)
 		return -errno;
 
 	return 0;
 }
 
-static int hciops_stop_scanning(int index)
+static int hciops_start_scanning(int index)
 {
-	if (hci_le_set_scan_enable(SK(index), 0x00, 0x00) < 0)
+	le_set_scan_parameters_cp cp;
+
+	memset(&cp, 0, sizeof(cp));
+	cp.type = 0x01;			/* Active scanning */
+	cp.interval = htobs(0x0010);
+	cp.window = htobs(0x0010);
+	cp.own_bdaddr_type = 0;		/* Public address */
+	cp.filter = 0;			/* Accept all adv packets */
+
+	if (hci_send_cmd(SK(index), OGF_LE_CTL, OCF_LE_SET_SCAN_PARAMETERS,
+				LE_SET_SCAN_PARAMETERS_CP_SIZE, &cp) < 0)
 		return -errno;
 
-	return 0;
+	return le_set_scan_enable(index, 1);
+}
+
+static int hciops_stop_scanning(int index)
+{
+	return le_set_scan_enable(index, 0);
 }
 
 static int hciops_resolve_name(int index, bdaddr_t *bdaddr)
@@ -2004,17 +2126,13 @@ fail:
 
 static int hciops_read_local_version(int index, struct hci_version *ver)
 {
-	if (hci_read_local_version(SK(index), ver, HCI_REQ_TIMEOUT) < 0)
-		return -errno;
-
+	memcpy(ver, &VER(index), sizeof(*ver));
 	return 0;
 }
 
 static int hciops_read_local_features(int index, uint8_t *features)
 {
-	if (hci_read_local_features(SK(index), features, HCI_REQ_TIMEOUT) < 0)
-		return -errno;
-
+	memcpy(features, FEATURES(index), 8);
 	return  0;
 }
 
diff --git a/src/adapter.c b/src/adapter.c
index 27a9605..0c42daf 100644
--- a/src/adapter.c
+++ b/src/adapter.c
@@ -1018,16 +1018,13 @@ void adapter_update_tx_power(bdaddr_t *bdaddr, uint8_t status, void *ptr)
 	update_ext_inquiry_response(adapter);
 }
 
-void adapter_update_local_name(bdaddr_t *bdaddr, uint8_t status, void *ptr)
+void adapter_update_local_name(bdaddr_t *bdaddr, void *ptr)
 {
 	read_local_name_rp rp;
 	struct hci_dev *dev;
 	struct btd_adapter *adapter;
 	gchar *name;
 
-	if (status)
-		return;
-
 	adapter = manager_find_adapter(bdaddr);
 	if (!adapter) {
 		error("Unable to find matching adapter");
diff --git a/src/adapter.h b/src/adapter.h
index b0eedb6..b886f9b 100644
--- a/src/adapter.h
+++ b/src/adapter.h
@@ -129,7 +129,7 @@ void adapter_emit_device_found(struct btd_adapter *adapter,
 void adapter_mode_changed(struct btd_adapter *adapter, uint8_t scan_mode);
 void adapter_setname_complete(bdaddr_t *local, uint8_t status);
 void adapter_update_tx_power(bdaddr_t *bdaddr, uint8_t status, void *ptr);
-void adapter_update_local_name(bdaddr_t *bdaddr, uint8_t status, void *ptr);
+void adapter_update_local_name(bdaddr_t *bdaddr, void *ptr);
 void adapter_service_insert(const bdaddr_t *bdaddr, void *rec);
 void adapter_service_remove(const bdaddr_t *bdaddr, void *rec);
 sdp_list_t *adapter_get_services(struct btd_adapter *adapter);
